{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AgentHelm","text":"<p>Production-Ready Orchestration for AI Agents.</p> <p>AgentHelm is a lightweight Python framework for building AI agents with a focus on production-readiness. It provides the essential orchestration layer to make your agents observable, reliable, and safe.</p> <p>In the rapidly evolving world of AI agents, many frameworks focus on rapid prototyping. AgentHelm is different. It's built on the premise that for agents to be trusted in real-world, production environments, they need the same level of observability and control as traditional software.</p> <p>If you've ever struggled to debug a failing agent or worried about deploying an agent that interacts with real-world systems, AgentHelm is for you.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Traceable Execution: Automatically log every tool call, its inputs, outputs, errors, and execution time. Get a complete, structured audit trail of your agent's actions.</li> <li>Human-in-the-Loop: Mark sensitive tools (e.g., <code>charge_credit_card</code>) with a <code>@tool(requires_approval=True)</code> decorator to ensure a human must approve the action before it runs.</li> <li>Resilient Workflows: Define automatic retries for flaky tools that might fail due to transient network errors.</li> <li>Transactional Safety: Implement automatic rollbacks for multi-step workflows. If a step fails, AgentHelm can run compensating actions to undo the previous steps.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-installation","title":"1. Installation","text":"<pre><code>pip install agenthelm\n</code></pre>"},{"location":"#2-create-your-tools","title":"2. Create your Tools","text":"<p>Create a Python file (e.g., <code>tools.py</code>) and define your functions with the <code>@tool</code> decorator. AgentHelm automatically parses the function signature to build the contract.</p> <pre><code># tools.py\nfrom orchestrator.core.tool import tool\n\n@tool()\ndef get_weather(city: str) -&gt; str:\n    \"\"\"Gets the current weather for a given city.\"\"\"\n    if city == \"New York\":\n        return \"It is 24\u00b0C and sunny in New York.\"\n    else:\n        return f\"Sorry, I don't know the weather for {city}.\"\n\n@tool(requires_approval=True)\ndef post_tweet(message: str) -&gt; dict:\n    \"\"\"Posts a message to a social media feed.\"\"\"\n    print(f\"TWEETING: {message}\")\n    return {\"status\": \"posted\"}\n</code></pre>"},{"location":"#3-environment-variables","title":"3. Environment Variables","text":"<p>AgentHelm requires API keys for the Large Language Models (LLMs) it interacts with. Set these as environment variables:</p> <ul> <li>Mistral AI: Set <code>MISTRAL_API_KEY</code>. Optionally, set <code>MISTRAL_MODEL_NAME</code> (defaults to <code>mistral-small-latest</code>).     <code>bash     export MISTRAL_API_KEY=\"your_mistral_api_key_here\"     # export MISTRAL_MODEL_NAME=\"mistral-large-latest\"</code></li> <li>OpenAI: Set <code>OPENAI_API_KEY</code>. Optionally, set <code>OPENAI_MODEL_NAME</code> (defaults to <code>gpt-4</code>).     <code>bash     export OPENAI_API_KEY=\"your_openai_api_key_here\"     # export OPENAI_MODEL_NAME=\"gpt-3.5-turbo\"</code></li> </ul>"},{"location":"#4-run-the-agent","title":"4. Run the Agent","text":"<p>Use the <code>agenthelm</code> command-line tool (or <code>python -m main</code>) to run your agent. The CLI handles everything from setting up the agent to running the reasoning loop and logging the traces.</p> <pre><code># Run the agent from your terminal\npython -m main run \\\n  --agent-file examples/cli_tools_example/my_agent_tools.py \\\n  --task \"What is the weather in New York?\"\n\n# For verbose output, add the -v or --verbose flag\npython -m main run \\\n  --agent-file examples/cli_tools_example/my_agent_tools.py \\\n  --task \"What is the weather in New York?\" \\\n  --llm-type mistral \\\n  --verbose\n</code></pre> <p>This will produce a detailed <code>cli_trace.json</code> file, giving you a perfect record of the agent's execution.</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>This section provides a detailed API reference for all public classes and functions in the AgentHelm framework.</p> <p>Coming soon...</p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>This section explains the fundamental ideas behind AgentHelm.</p>"},{"location":"concepts/#the-tracer","title":"The Tracer","text":"<p>Coming soon...</p>"},{"location":"concepts/#the-agent","title":"The Agent","text":"<p>Coming soon...</p>"},{"location":"concepts/#the-event-model","title":"The Event Model","text":"<p>Coming soon...</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This tutorial will walk you through building a complete agent with AgentHelm, from simple tools to complex, multi-step workflows with rollbacks.</p> <p>Coming soon...</p>"}]}